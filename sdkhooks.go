/**
 * sdkhooks.go
 * 
 * Copyright 2020 Nirari Technologies, Alliedmodders LLC.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 */

package main

import "sourcemod/types"

const (
	DMG_GENERIC                 = 0          /**< generic damage was done */
	DMG_CRUSH                   = (1 << 0)    /**< crushed by falling or moving object.
                                                     NOTE: It's assumed crush damage is occurring as a result of physics collision,
                                                     so no extra physics force is generated by crush damage.
                                                     DON'T use DMG_CRUSH when damaging entities unless it's the result of a physics
                                                     collision. You probably want DMG_CLUB instead. */
	DMG_BULLET                  = (1 << 1)    /**< shot */
	DMG_SLASH                   = (1 << 2)    /**< cut, clawed, stabbed */
	DMG_BURN                    = (1 << 3)    /**< heat burned */
	DMG_VEHICLE                 = (1 << 4)    /**< hit by a vehicle */
	DMG_FALL                    = (1 << 5)    /**< fell too far */
	DMG_BLAST                   = (1 << 6)    /**< explosive blast damage */
	DMG_CLUB                    = (1 << 7)    /**< crowbar, punch, headbutt */
	DMG_SHOCK                   = (1 << 8)    /**< electric shock */
	DMG_SONIC                   = (1 << 9)    /**< sound pulse shockwave */
	DMG_ENERGYBEAM              = (1 << 10)   /**< laser or other high energy beam  */
	DMG_PREVENT_PHYSICS_FORCE   = (1 << 11)   /**< Prevent a physics force  */
	DMG_NEVERGIB                = (1 << 12)   /**< with this bit OR'd in, no damage type will be able to gib victims upon death */
	DMG_ALWAYSGIB               = (1 << 13)   /**< with this bit OR'd in, any damage type can be made to gib victims upon death. */
	DMG_DROWN                   = (1 << 14)   /**< Drowning */
	DMG_PARALYZE                = (1 << 15)   /**< slows affected creature down */
	DMG_NERVEGAS                = (1 << 16)   /**< nerve toxins, very bad */
	DMG_POISON                  = (1 << 17)   /**< blood poisoning - heals over time like drowning damage */
	DMG_RADIATION               = (1 << 18)   /**< radiation exposure */
	DMG_DROWNRECOVER            = (1 << 19)   /**< drowning recovery */
	DMG_ACID                    = (1 << 20)   /**< toxic chemicals or acid burns */
	DMG_SLOWBURN                = (1 << 21)   /**< in an oven */
	DMG_REMOVENORAGDOLL         = (1 << 22)   /**< with this bit OR'd in, no ragdoll will be created, and the target will be quietly removed.
                                                     use this to kill an entity that you've already got a server-side ragdoll for */
	DMG_PHYSGUN                 = (1 << 23)   /**< Hit by manipulator. Usually doesn't do any damage. */
	DMG_PLASMA                  = (1 << 24)   /**< Shot by Cremator */
	DMG_AIRBOAT                 = (1 << 25)   /**< Hit by the airboat's gun */
	DMG_DISSOLVE                = (1 << 26)   /**< Dissolving! */
	DMG_BLAST_SURFACE           = (1 << 27)   /**< A blast on the surface of water that cannot harm things underwater */
	DMG_DIRECT                  = (1 << 28)
	DMG_BUCKSHOT                = (1 << 29)   /**< not quite a bullet. Little, rounder, different. */
	
	DMG_CRIT                    = DMG_ACID
	DMG_RADIUS_MAX              = DMG_ENERGYBEAM
	DMG_NOCLOSEDISTANCEMOD      = DMG_POISON
	DMG_HALF_FALLOFF            = DMG_RADIATION
	DMG_USEDISTANCEMOD          = DMG_SLOWBURN
	DMG_IGNITE                  = DMG_PLASMA
	DMG_USE_HITLOCATIONS        = DMG_AIRBOAT
)


type SDKHookType int
const (
	SDKHook_EndTouch = SDKHookType(0)
	SDKHook_FireBulletsPost
	SDKHook_OnTakeDamage
	SDKHook_OnTakeDamagePost
	SDKHook_PreThink
	SDKHook_PostThink
	SDKHook_SetTransmit
	SDKHook_Spawn
	SDKHook_StartTouch
	SDKHook_Think
	SDKHook_Touch
	SDKHook_TraceAttack
	SDKHook_TraceAttackPost
	SDKHook_WeaponCanSwitchTo
	SDKHook_WeaponCanUse
	SDKHook_WeaponDrop
	SDKHook_WeaponEquip
	SDKHook_WeaponSwitch
	SDKHook_ShouldCollide
	SDKHook_PreThinkPost
	SDKHook_PostThinkPost
	SDKHook_ThinkPost
	SDKHook_EndTouchPost
	SDKHook_GroundEntChangedPost
	SDKHook_SpawnPost
	SDKHook_StartTouchPost
	SDKHook_TouchPost
	SDKHook_VPhysicsUpdate
	SDKHook_VPhysicsUpdatePost
	SDKHook_WeaponCanSwitchToPost
	SDKHook_WeaponCanUsePost
	SDKHook_WeaponDropPost
	SDKHook_WeaponEquipPost
	SDKHook_WeaponSwitchPost
	SDKHook_Use
	SDKHook_UsePost
	SDKHook_Reload
	SDKHook_ReloadPost
	SDKHook_GetMaxHealth  /**< ep2v and later */
	SDKHook_Blocked
	SDKHook_BlockedPost
	SDKHook_OnTakeDamageAlive
	SDKHook_OnTakeDamageAlivePost
	SDKHook_CanBeAutobalanced
)


type UseType int
const (
	Use_Off = UseType(0)
	Use_On
	Use_Set
	Use_Toggle
)


func SDKHook(entity Entity, hook SDKHookType, callback any)
func SDKHookEx(entity Entity, hook SDKHookType, callback any) bool

func SDKUnhook(entity Entity, hook SDKHookType, callback any)
func SDKUnhookEx(entity Entity, hook SDKHookType, callback any) bool

func SDKHooks_TakeDamage(entity, inflictor, attacker Entity, damage float, damageType, weapon int, damageForce, damagePosition Vec3)

func SDKHooks_DropWeapon(client, weapon Entity, vecTarget, vecVelocity Vec3)