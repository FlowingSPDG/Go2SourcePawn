/**
 * ast_to_sp.go
 * 
 * Copyright 2020 Nirari Technologies.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 */

package ASTtoSP


import (
	"fmt"
	"strings"
	"go/token"
	//"go/scanner"
	//"go/parser"
	"go/ast"
	//"go/types"   /// Golang's Type system.
)


type SPGen struct {
	Includes, Vars, Funcs  strings.Builder
	SrcGoAST               *ast.File
	Types, Patterns        map[string]string
	GenInclude             bool
}

func (spg *SPGen) ReadImport(imp *ast.ImportSpec) {
	/// if we have a dot, assume it relative.
	if imp.Path.Value[1] == '.' {
		spg.Includes.WriteString("#include \"" + imp.Path.Value[2:] + "\n")
	} else {
		spg.Includes.WriteString("#include <" + imp.Path.Value[1 : len(imp.Path.Value)-1] + ">\n")
	}
}

func (spg *SPGen) AnalyzeGenDecl(g *ast.GenDecl) {
	switch g.Tok {
		case token.IMPORT:
			for _, imp := range g.Specs {
				spg.ReadImport(imp.(*ast.ImportSpec))
			}
			spg.Includes.WriteString("\n")
		//case token.CONST:   *ValueSpec
		//case token.TYPE:    *TypeSpec
		//case token.VAR:     *ValueSpec
	}
}

func (spg *SPGen) AnalyzeFuncDecl(f *ast.FuncDecl) {
	var fnc = struct {
		params, name, body string
		mult_ret           bool
	}{}
	fnc.name = "public "
	if f.Type.Results==nil {
		fnc.name += "void"
	} else {
		rettype := f.Type.Results.List[0].Type.(*ast.Ident)
		fnc.name += rettype.Name
	}
	fnc.name += " " + f.Name.Name
	spg.Funcs.WriteString(fnc.name)
	spg.Funcs.WriteString(fnc.params)
	spg.Funcs.WriteString(fnc.body)
	spg.Funcs.WriteString("\n\n")
}

func (spg *SPGen) AnalyzeDecl(d ast.Decl) {
	switch d.(type) {
		case *ast.GenDecl:
			spg.AnalyzeGenDecl(d.(*ast.GenDecl))
		case *ast.FuncDecl:
			spg.AnalyzeFuncDecl(d.(*ast.FuncDecl))
	}
}

func (spg *SPGen) AnalyzeFile() {
	/// basic types.
	
	spg.Types = map[string]string {
		"int": "int",
		"Entity": "int",
		"float": "float",
		"bool": "bool",
		"string": "char[]",
		"int8": "char",
		"Vec3": "float <id>[3];",
		"Map": "StringMap",
		"Array": "ArrayList",
		"Obj": "Handle",
	}
	
	spg.Includes.WriteString("/**\n * file generated by the GoToSourcePawn Transpiler v0.3a\n * Copyright 2020 (C) Kevin Yonan aka Nergal, Assyrianic.\n * GoToSourcePawn Project is licensed under MIT.\n * link: 'https://github.com/assyrianic/Go2SourcePawn'\n */\n\n")
	spg.Includes.WriteString("#include <sourcemod>\n")
	
	spg.Vars.WriteString("#pragma semicolon    1\n#pragma newdecls     required\n\n\n")
	
	for _, decl := range spg.SrcGoAST.Decls {
		spg.AnalyzeDecl(decl)
	}
}

func (spg *SPGen) PrintAST() {
	ast.Inspect(spg.SrcGoAST, func(n ast.Node) bool {
		if n != nil {
			fmt.Printf("%T: ", n)
			fmt.Println(n)
		}
		return true
	})
}

func (spg *SPGen) Finalize() string {
	return spg.Includes.String() + spg.Vars.String() + spg.Funcs.String()
}