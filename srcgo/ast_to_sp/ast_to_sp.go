/**
 * ast_to_so.go
 * 
 * Copyright 2020 Nirari Technologies.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 */

package SrcGoSPGen


import (
	"strings"
	"fmt"
	"unicode"
	//"bytes"
	"go/token"
	"go/ast"
	"go/types"
	//"go/format"
	//"go/constant"
	"../ast_transform"
)

var (
	TypeNames = map[string]string{
		"int8": "char",
		"Map": "StringMap",
		"Array": "ArrayList",
	}
	FuncNames = map[string]string{
		"len":  "sizeof",
	}
)

const (
	Header string          = "/**\n * file generated by the GoToSourcePawn Transpiler v0.14a\n * Copyright 2020 (C) Kevin Yonan aka Nergal, Assyrianic.\n * GoToSourcePawn Project is licensed under MIT.\n * link: 'https://github.com/assyrianic/Go2SourcePawn'\n */\n\n"
	SrcModInc string       = "#include <sourcemod>\n"
	
	IncludeTemplate string = "#include <PATH>"
	VarTemplate string     = "<TYPE> <NAME>"
	FuncTemplate string    = "public <TYPE> <NAME>(<VARS>) <BLOCK>"
	BlockTemplate string   = "{ <STATEMENTS> }"
	StmtTemplate string    = "<STATEMENT>;"
	IfTemplate string      = "if(<COND>) <BLOCK>"
	ElIfTemplate string    = "else <IF_STMT> <BLOCK>"
	ElseTemplate string    = "else <BLOCK>"
	ForTemplate string     = "for(<INIT>;<COND>;<POST>) <BLOCK>"
	SwitchTemplate string  = "switch(<COND>) <BLOCK>"
	CaseTemplate string    = "case <EXPRS>: <BLOCK>"
	DefaultTemplate string = "default: <BLOCK>"
	
	ReturnTemplate string  = "return <EXPR>"
	BinExprTemplate string = "<EXPR> <OP> <EXPR>"
	SelectTemplate string  = "<EXPR>.<EXPR>"
	UnaryTemplate string   = "<OP><EXPR>"
	ArrayTemplate string   = "<EXPR>[<EXPR>]"
	CallTemplate string    = "<EXPR>(<ARGS>)"
)

func ReplaceStringName(s *string, typ, rep string) bool {
	if strings.Contains(*s, typ) {
		*s = strings.Replace(*s, typ, rep, -1)
		return true
	}
	return false
}

type TypeString struct {
	TypeName, LhsBracks, Name, RhsBracks string
}

func (ts TypeString) Join(param, is_ref, is_array bool) string {
	if param {
		if is_array {
			if !is_ref {
				/// const type[] name
				/// const type name[N]
				return "const " + ts.TypeName + ts.LhsBracks + " " + ts.Name + ts.RhsBracks
			} else {
				/// type[] name
				/// type name[N]
				return ts.TypeName + ts.LhsBracks + " " + ts.Name + ts.RhsBracks
			}
		} else if is_ref {
			/// type& name
			return ts.TypeName + "& " + ts.Name
		} else {
			/// type name
			return ts.TypeName + " " + ts.Name
		}
	} else {
		if is_array {
			/// type name[N]
			return ts.TypeName + " " + ts.Name + ts.RhsBracks
		} else {
			/// type name
			return ts.TypeName + " " + ts.Name
		}
	}
}

/**
 * SP params -> [const] TypeName ([]... | &) VarName ([N]...)
 * SP vars   ->         TypeName VarName ([(N)]...)
 */
func GetTypeString(expr ast.Expr, name string, param bool) string {
	var ts TypeString
	ts.Name = name
	var is_ref, is_array bool
	if typ := SrcGo_ASTMod.ASTCtxt.SrcGoTypeInfo.TypeOf(expr); typ != nil {
	recheck:
		original := typ.String()
		type_name := strings.Replace(original, "untyped ", "", -1)
		type_name = strings.TrimFunc(type_name, func(r rune) bool {
			return !unicode.IsLetter(r)
		})
		if _, found := TypeNames[type_name]; found {
			type_name = TypeNames[type_name]
		}
		ts.TypeName = type_name
		switch t := typ.(type) {
			//case *types.Struct:
			case *types.Array:
				ts.RhsBracks = fmt.Sprintf("[%d]", t.Len()) + ts.RhsBracks
				is_array = true
				typ = t.Elem()
				goto recheck
			case *types.Named:
				if _, is_struct := t.Underlying().(*types.Struct); !is_struct {
					if _, builtin := SrcGo_ASTMod.ASTCtxt.BuiltnTypes[type_name]; !builtin {
						typ = t.Underlying()
						goto recheck
					}
				}
			case *types.Slice:
				typ = t.Elem()
				if param {
					ts.LhsBracks += "[]"
				} else {
					ts.RhsBracks = "[]" + ts.RhsBracks
				}
				is_array = true
				goto recheck
			case *types.Pointer:
				if !is_ref {
					is_ref = true
				} else {
					SrcGo_ASTMod.PrintSrcGoErr(expr.Pos(), "Multi-Pointers are Illegal.")
				}
				typ = t.Elem()
				goto recheck
			case *types.Basic:
				if type_name=="string" {
					ts.TypeName = "char"
					if param {
						ts.LhsBracks += "[]"
					} else {
						ts.RhsBracks = "[]" + ts.RhsBracks
					}
					is_array = true
				}
		}
	}
	return ts.Join(param, is_ref, is_array)
}


func GetTypeStrings(expr ast.Expr) (string, int, []string, bool) {
	array_lens := make([]string, 0)
	var empty_brackets int
	ptr_check := false
	
	/// first we get the type information from the expression.
	if typ := SrcGo_ASTMod.ASTCtxt.SrcGoTypeInfo.TypeOf(expr); typ != nil {
	recheck:
		/// strip unnecessary info and replace type names.
		original := typ.String()
		type_name := strings.Replace(original, "untyped ", "", -1)
		ReplaceStringName(&type_name, "int8", "char")
		type_name = strings.TrimFunc(type_name, func(r rune) bool {
			return !unicode.IsLetter(r)
		})
		
		if ReplaceStringName(&type_name, "string", "char") {
			array_lens = append([]string{""}, array_lens...)
		}
		
		switch t := typ.(type) {
			case *types.Struct:
				array_lens = append([]string{fmt.Sprintf("%d", t.NumFields())}, array_lens...)
				return original, 0, array_lens, false
			case *types.Array:
				array_lens = append([]string{fmt.Sprintf("%d", t.Len())}, array_lens...)
				typ = t.Elem()
				goto recheck
			case *types.Named:
				if _, is_struct := t.Underlying().(*types.Struct); is_struct {
					return original, 0, array_lens, false
				} else if type_name=="Handle" {
					return type_name, empty_brackets, array_lens, ptr_check
				}
				typ = t.Underlying()
				goto recheck
			case *types.Slice:
				typ = t.Elem()
				array_lens = append([]string{""}, array_lens...)
				goto recheck
			case *types.Pointer:
				if !ptr_check {
					ptr_check = true
				} else {
					SrcGo_ASTMod.PrintSrcGoErr(expr.Pos(), "Multi-Pointers are Illegal.")
				}
				typ = t.Elem()
				goto recheck
		}
		return type_name, empty_brackets, array_lens, ptr_check
	}
	return "", -1, nil, false
}

func DoArrayBrackets(exprs []string) string {
	var s string
	for i:=len(exprs)-1; i>=0; i-- {
		s += "[" + exprs[i] + "]"
	}
	return s
}

func WriteParams(flist *ast.FieldList) []string {
	param_list := make([]string, 0)
	for _, parm := range flist.List {
		for _, name := range parm.Names {
			param_list = append(param_list, GetTypeString(parm.Type, name.Name, true))
		}
	}
	return param_list
}

func WriteStructMembs(flist *ast.FieldList) []string {
	field_list := make([]string, 0)
	for _, field := range flist.List {
		for _, member_name := range field.Names {
			field_str := GetTypeString(field.Type, member_name.Name, false)
			field_list = append(field_list, field_str)
		}
	}
	return field_list
}


/// final code generation stuffs.
type CodeGen struct {
	Includes, Globals, Funcs strings.Builder
	Tabs uint
}

type CodeBlock struct {
	Tab uint
	Stmts []string
}

type CodeFunc struct {
	CodeBlock
	Header string
}

func GenSPFile(f *ast.File) string {
	var c = CodeGen{}
	c.Includes.WriteString(Header + SrcModInc)
	for _, d := range f.Decls {
		switch decl := d.(type) {
			case *ast.GenDecl:
				c.GenerateGenDecl(decl)
			
			//case *ast.FuncDecl:
			//	c.GenerateFuncDecl(decl)
		}
	}
	return c.Includes.String() + "\n" + c.Globals.String() + "\n" + c.Funcs.String()
}

func (c *CodeGen) GenerateGenDecl(g *ast.GenDecl) {
	switch g.Tok {
		case token.IMPORT:
			for _, spec := range g.Specs {
				imp := spec.(*ast.ImportSpec)
				if imp.Path.Value[1] == '.' {
					c.Includes.WriteString( strings.Replace(IncludeTemplate, "<PATH>", "\"" + imp.Path.Value[2:], -1) )
					c.Includes.WriteString("\n")
				} else {
					c.Includes.WriteString( strings.Replace(IncludeTemplate, "PATH", imp.Path.Value[1 : len(imp.Path.Value)-1], -1) )
					c.Includes.WriteString("\n")
				}
			}
		
		case token.CONST, token.VAR:
			for _, spec := range g.Specs {
				const_spec := spec.(*ast.ValueSpec)
				/// if a constant is untyped, it can have different names and associating values.
				if const_spec.Type != nil {
					for i, name := range const_spec.Names {
						/// TODO: rework this to generate values from a different function.
						switch val := const_spec.Values[i].(type) {
							case *ast.Ident:
								c.Globals.WriteString(GetTypeString(const_spec.Type, name.Name, false))
								c.Globals.WriteString(" = " + val.Name + ";\n")
							
							case *ast.BasicLit:
								c.Globals.WriteString(GetTypeString(const_spec.Type, name.Name, false))
								c.Globals.WriteString(" = " + val.Value + ";\n")
							
							case *ast.CompositeLit:
						}
					}
				} else {
					for i, name := range const_spec.Names {
						switch val := const_spec.Values[i].(type) {
							case *ast.Ident:
								c.Globals.WriteString(GetTypeString(const_spec.Values[i], name.Name, false))
								c.Globals.WriteString(" = " + val.Name + ";\n")
							
							case *ast.BasicLit:
								c.Globals.WriteString(GetTypeString(const_spec.Values[i], name.Name, false))
								c.Globals.WriteString(" = " + val.Value + ";\n")
							
							case *ast.CompositeLit:
						}
					}
				}
			}
			c.Globals.WriteString("\n")
		
		case token.TYPE:
			for _, spec := range g.Specs {
				type_spec := spec.(*ast.TypeSpec)
				switch t := type_spec.Type.(type) {
					case *ast.Ident:
						TypeNames[type_spec.Name.Name] = t.Name
					
					case *ast.StructType:
						c.Globals.WriteString("enum struct " + type_spec.Name.Name + " {")
						field_list := WriteStructMembs(t.Fields)
						for _, field := range field_list {
							c.Globals.WriteString("\n\t" + field + ";")
						}
						c.Globals.WriteString("\n}\n")
					
					case *ast.FuncType:
						/// typedef Whatever = function type (params);
						c.Globals.WriteString("typedef " + type_spec.Name.Name + " = function ")
						if t.Results != nil {
							type_str := GetTypeString(t.Results.List[0].Type, "", false)
							type_str = strings.TrimSpace(type_str)
							if strings.Count(type_str, "[") > 0 {
								/// shoot error but continue.
								SrcGo_ASTMod.PrintSrcGoErr(t.Pos(), "Typedef'd functions are not allowed to return arrays.")
							}
							c.Globals.WriteString(type_str)
						} else {
							c.Globals.WriteString("void")
						}
						c.Globals.WriteString(" (")
						
						param_list := WriteParams(t.Params)
						param_count := len(param_list)
						for i, param := range param_list {
							c.Globals.WriteString(param)
							if i+1 != param_count {
								c.Globals.WriteString(", ")
							}
						}
						c.Globals.WriteString(");\n")
				}
			}
			c.Globals.WriteString("\n")
		//case token.VAR:
	}
}