/**
 * ast_to_so.go
 * 
 * Copyright 2020 Nirari Technologies.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 */

package SrcGoSPGen


import (
	"strings"
	"fmt"
	"unicode"
	//"bytes"
	"go/token"
	"go/ast"
	"go/types"
	//"go/format"
	//"go/constant"
	"../ast_transform"
)

var (
	TypeNames = map[string]string{
		"int8":   "char",
		"uint8":  "char",
		"uint16": "int",
		"int16":  "int",
		"uint32": "int",
		"int32":  "int",
		"uint64": "int",
		"int64":  "int",
		"float64":"float",
		"Map":    "StringMap",
		"Array":  "ArrayList",
		"Plugin": "public Plugin", /// hack
		"Entity": "int",
	}
	
	FuncNames = map[string]string{
		"len":  "sizeof",
		"main": "OnPluginStart",
	}
	
	IdenNames = map[string]string{
		"nil":  "null",
	}
)

const (
	Header string          = "/**\n * file generated by the GoToSourcePawn Transpiler v0.22a\n * Copyright 2020 (C) Kevin Yonan aka Nergal, Assyrianic.\n * GoToSourcePawn Project is licensed under MIT.\n * link: 'https://github.com/assyrianic/Go2SourcePawn'\n */\n\n"
	SrcModInc string       = "#include <sourcemod>\n"
	IncludeTemplate string = "#include <PATH>"
)

func ReplaceStringName(s *string, typ, rep string) bool {
	if strings.Contains(*s, typ) {
		*s = strings.Replace(*s, typ, rep, -1)
		return true
	}
	return false
}

type TypeString struct {
	TypeName, LhsBracks, Name, RhsBracks string
}

func (ts TypeString) Join(param, is_ref, is_array bool) string {
	if param {
		if is_array {
			if !is_ref {
				/// const type[] name
				/// const type name[N]
				return "const " + ts.TypeName + ts.LhsBracks + " " + ts.Name + ts.RhsBracks
			} else {
				/// type[] name
				/// type name[N]
				return ts.TypeName + ts.LhsBracks + " " + ts.Name + ts.RhsBracks
			}
		} else if is_ref {
			/// type& name
			return ts.TypeName + "& " + ts.Name
		} else {
			/// type name
			return ts.TypeName + " " + ts.Name
		}
	} else {
		if is_array {
			/// type name[N]
			return ts.TypeName + " " + ts.Name + ts.RhsBracks
		} else {
			/// type name
			return ts.TypeName + " " + ts.Name
		}
	}
}

/**
 * SP params -> [const] TypeName ([]... | &) VarName ([N]...)
 * SP vars   ->         TypeName VarName ([(N)]...)
 * SP ret    ->         TypeName ([])
 */
func GetTypeString(expr ast.Expr, name string, param bool) string {
	var ts TypeString
	ts.Name = name
	var is_ref, is_array bool
	if typ := SrcGo_ASTMod.ASTCtxt.SrcGoTypeInfo.TypeOf(expr); typ != nil {
	recheck:
		original := typ.String()
		type_name := strings.Replace(original, "untyped ", "", -1)
		if _, found := TypeNames[type_name]; found {
			type_name = TypeNames[type_name]
		}
		type_name = strings.TrimFunc(type_name, func(r rune) bool {
			return !unicode.IsLetter(r)
		})
		ts.TypeName = type_name
		switch t := typ.(type) {
			//case *types.Struct:
			case *types.Array:
				ts.RhsBracks += fmt.Sprintf("[%d]", t.Len())
				is_array = true
				typ = t.Elem()
				goto recheck
			case *types.Named:
				_, builtin := SrcGo_ASTMod.ASTCtxt.BuiltnTypes[type_name]
				if _, is_struct := t.Underlying().(*types.Struct); !builtin {
					if is_struct {
						is_array = true
					} else {
						typ = t.Underlying()
						goto recheck
					}
				}
			case *types.Slice:
				typ = t.Elem()
				if param {
					ts.LhsBracks += "[]"
				} else {
					ts.RhsBracks += "[]"
				}
				is_array = true
				goto recheck
			case *types.Pointer:
				if !is_ref {
					is_ref = true
				} else {
					SrcGo_ASTMod.PrintSrcGoErr(expr.Pos(), "Multi-Pointers are Illegal.")
				}
				typ = t.Elem()
				goto recheck
			case *types.Basic:
				if type_name=="string" {
					ts.TypeName = "char"
					if param {
						ts.LhsBracks += "[]"
					} else {
						ts.RhsBracks += "[]"
					}
					is_array = true
				}
		}
	}
	return ts.Join(param, is_ref, is_array)
}


func WriteParams(flist *ast.FieldList) []string {
	param_list := make([]string, 0)
	for _, parm := range flist.List {
		for _, name := range parm.Names {
			param_list = append(param_list, GetTypeString(parm.Type, name.Name, true))
		}
	}
	return param_list
}

func WriteStructMembs(flist *ast.FieldList) []string {
	field_list := make([]string, 0)
	for _, field := range flist.List {
		for _, member_name := range field.Names {
			field_str := GetTypeString(field.Type, member_name.Name, false)
			field_list = append(field_list, field_str)
		}
	}
	return field_list
}


/// final code generation stuffs.
type CodeGen struct {
	Includes, Globals, Funcs strings.Builder
	Tabs uint
}

func WriteTabStr(count uint) string {
	var s string
	for i:=uint(0); i<count; i++ {
		s += "\t"
	}
	return s
}

func WriteNLineTab(count uint) string {
	return "\n" + WriteTabStr(count)
}

func GenSPFile(f *ast.File) string {
	var c = CodeGen{}
	c.Includes.WriteString(Header + SrcModInc)
	for _, d := range f.Decls {
		c.GenerateDeclNode(d, false)
	}
	return c.Includes.String() + "\n" + c.Globals.String() + "\n" + c.Funcs.String()
}

func (c *CodeGen) GenerateDeclNode(d ast.Decl, is_stmt bool) {
	switch decl := d.(type) {
		case *ast.GenDecl:
			c.GenerateGenDecl(decl, is_stmt)
		
		case *ast.FuncDecl:
			c.GenerateFuncDecl(decl)
	}
}

func (c *CodeGen) GenerateGenDecl(g *ast.GenDecl, is_stmt bool) {
	var strbldr *strings.Builder
	if is_stmt {
		strbldr = &c.Funcs
	} else {
		strbldr = &c.Globals
	}
	
	switch g.Tok {
		case token.IMPORT:
			for _, spec := range g.Specs {
				imp := spec.(*ast.ImportSpec)
				if imp.Path.Value[1] == '.' {
					c.Includes.WriteString( strings.Replace(IncludeTemplate, "<PATH>", "\"" + imp.Path.Value[2:], -1) )
					c.Includes.WriteString("\n")
				} else {
					c.Includes.WriteString( strings.Replace(IncludeTemplate, "PATH", imp.Path.Value[1 : len(imp.Path.Value)-1], -1) )
					c.Includes.WriteString("\n")
				}
			}
		
		case token.CONST:
			for _, spec := range g.Specs {
				c.GenerateConstSpec(spec.(*ast.ValueSpec), strbldr)
			}
			strbldr.WriteString("\n")
			
		case token.VAR:
			for _, spec := range g.Specs {
				c.GenerateVarSpec(spec.(*ast.ValueSpec), strbldr)
			}
			strbldr.WriteString("\n")
		
		case token.TYPE:
			for _, spec := range g.Specs {
				c.GeneratTypeSpec(spec.(*ast.TypeSpec), strbldr)
			}
			strbldr.WriteString("\n")
	}
}

func (c *CodeGen) GeneratTypeSpec(type_spec *ast.TypeSpec, strbldr *strings.Builder) {
	switch t := type_spec.Type.(type) {
		case *ast.Ident:
			TypeNames[type_spec.Name.Name] = t.Name
		
		case *ast.StructType:
			strbldr.WriteString(WriteTabStr(c.Tabs))
			c.Tabs++
			strbldr.WriteString("enum struct " + type_spec.Name.Name + " {")
			field_list := WriteStructMembs(t.Fields)
			for _, field := range field_list {
				strbldr.WriteString("\n" + WriteTabStr(c.Tabs) + field + ";")
			}
			c.Tabs--
			strbldr.WriteString("\n" + WriteTabStr(c.Tabs) + "}\n")
		
		case *ast.FuncType:
			/// typedef Whatever = function type (params);
			strbldr.WriteString("typedef " + type_spec.Name.Name + " = function ")
			if t.Results != nil {
				type_str := GetTypeString(t.Results.List[0].Type, "", false)
				type_str = strings.TrimSpace(type_str)
				if strings.Count(type_str, "[") > 0 {
					/// shoot error but continue.
					SrcGo_ASTMod.PrintSrcGoErr(t.Pos(), "Typedef'd functions are not allowed to return arrays.")
				}
				strbldr.WriteString(type_str)
			} else {
				strbldr.WriteString("void")
			}
			strbldr.WriteString(" (")
			
			param_list := WriteParams(t.Params)
			param_count := len(param_list)
			for i, param := range param_list {
				strbldr.WriteString(param)
				if i+1 != param_count {
					strbldr.WriteString(", ")
				}
			}
			strbldr.WriteString(");\n")
	}
}

func (c *CodeGen) GenerateConstSpec(const_spec *ast.ValueSpec, strbldr *strings.Builder) {
	/// if a constant is untyped, it can have different names and associating values.
	if const_spec.Type != nil {
		for _, name := range const_spec.Names {
			for _, value := range const_spec.Values {
				switch val := value.(type) {
					case *ast.CompositeLit:
						strbldr.WriteString(WriteTabStr(c.Tabs) + GetTypeString(const_spec.Type, name.Name, false))
						c.Tabs++
						strbldr.WriteString(" = {")
						for n, expr := range val.Elts {
							strbldr.WriteString("\n" + WriteTabStr(c.Tabs) + GetExprString(expr))
							if n+1 != len(val.Elts) {
								strbldr.WriteString(",")
							}
						}
						c.Tabs--
						strbldr.WriteString(WriteTabStr(c.Tabs) + "};\n")
						
					default:
						strbldr.WriteString(GetTypeString(const_spec.Type, name.Name, false))
						strbldr.WriteString(" = " + GetExprString(value) + ";\n")
				}
			}
		}
	} else {
		for i, name := range const_spec.Names {
			switch val := const_spec.Values[i].(type) {
				case *ast.CompositeLit:
					strbldr.WriteString(WriteTabStr(c.Tabs) + GetTypeString(val.Type, name.Name, false))
					strbldr.WriteString(" = {\n")
					c.Tabs++
					for n, expr := range val.Elts {
						strbldr.WriteString(WriteTabStr(c.Tabs) + GetExprString(expr))
						if n+1 != len(val.Elts) {
							strbldr.WriteString(",")
						}
						strbldr.WriteString("\n")
					}
					c.Tabs--
					strbldr.WriteString(WriteTabStr(c.Tabs) + "};\n")
					
				default:
					strbldr.WriteString(GetTypeString(const_spec.Values[i], name.Name, false))
					strbldr.WriteString(" = " + GetExprString(val) + ";\n")
			}
		}
	}
}

func (c *CodeGen) GenerateVarSpec(var_spec *ast.ValueSpec, strbldr *strings.Builder) {
	/// if a constant is untyped, it can have different names and associating values.
	if var_spec.Type != nil {
		for i, name := range var_spec.Names {
			strbldr.WriteString(WriteTabStr(c.Tabs) + GetTypeString(var_spec.Type, name.Name, false))
			if var_spec.Values != nil && i < len(var_spec.Values) {
				switch val := var_spec.Values[i].(type) {
					case *ast.CompositeLit:
						strbldr.WriteString(" = {")
						c.Tabs++
						for n, expr := range val.Elts {
							strbldr.WriteString(WriteTabStr(c.Tabs) + GetExprString(expr))
							if n+1 != len(val.Elts) {
								strbldr.WriteString(",")
							}
							strbldr.WriteString("\n")
						}
						c.Tabs--
						strbldr.WriteString(WriteTabStr(c.Tabs) + "}")
					default:
						strbldr.WriteString(" = " + GetExprString(var_spec.Values[i]))
				}
			}
			strbldr.WriteString(";\n")
		}
	} else {
		for _, name := range var_spec.Names {
			for _, value := range var_spec.Values {
				strbldr.WriteString(WriteTabStr(c.Tabs) + GetTypeString(value, name.Name, false))
				switch val := value.(type) {
					case *ast.CompositeLit:
						strbldr.WriteString(" = {\n")
						c.Tabs++
						for n, expr := range val.Elts {
							strbldr.WriteString(WriteTabStr(c.Tabs) + GetExprString(expr))
							if n+1 != len(val.Elts) {
								strbldr.WriteString(",")
							}
							strbldr.WriteString("\n")
						}
						c.Tabs--
						strbldr.WriteString(WriteTabStr(c.Tabs) + "}")
					default:
						strbldr.WriteString(" = " + GetExprString(value))
				}
			}
			strbldr.WriteString(";\n")
		}
	}
}


func (c *CodeGen) GenerateFuncDecl(f *ast.FuncDecl) {
	if f.Body != nil {
		c.Funcs.WriteString("public ")
	} else {
		c.Funcs.WriteString("native ")
	}
	
	if f.Type.Results != nil {
		c.Funcs.WriteString(GetTypeString(f.Type.Results.List[0].Type, "", false))
	} else {
		c.Funcs.WriteString("void ")
	}
	
	if replace_name, found := FuncNames[f.Name.Name]; found {
		f.Name.Name = replace_name
	}
	c.Funcs.WriteString(f.Name.Name + "(")
	param_list := WriteParams(f.Type.Params)
	param_count := len(param_list)
	for i, param := range param_list {
		c.Funcs.WriteString(param)
		if i+1 != param_count {
			c.Funcs.WriteString(", ")
		}
	}
	c.Funcs.WriteString(")")
	if f.Body != nil {
		c.Tabs = 0
		c.GenerateStmts(f.Body)
	} else {
		c.Funcs.WriteString(";")
	}
	c.Funcs.WriteString("\n")
}

func (c *CodeGen) GenerateStmts(b *ast.BlockStmt) {
	c.Funcs.WriteString(" {\n")
	c.Tabs++
	for i, stmt := range b.List {
		if i+1 != len(b.List) {
			c.GenerateStmt(b, stmt, true, true)
		} else {
			c.GenerateStmt(b, stmt, true, false)
			c.Funcs.WriteString("\n")
		}
	}
	c.Tabs--
	c.Funcs.WriteString(WriteTabStr(c.Tabs) + "}\n")
}

func (c *CodeGen) GenerateStmtsFromList(b []ast.Stmt) {
	c.Funcs.WriteString(" {\n")
	c.Tabs++
	for i, stmt := range b {
		if i+1 != len(b) {
			c.GenerateStmt(nil, stmt, true, true)
		} else {
			c.GenerateStmt(nil, stmt, true, false)
			c.Funcs.WriteString("\n")
		}
	}
	c.Tabs--
	c.Funcs.WriteString(WriteTabStr(c.Tabs) + "}\n")
}

func (c *CodeGen) GenerateStmt(b *ast.BlockStmt, s ast.Stmt, add_semicolon, add_newline bool) {
	switch n := s.(type) {
		case *ast.BlockStmt:
			c.GenerateStmts(n)
			return
		
		case *ast.AssignStmt:
			left_len, rite_len := len(n.Lhs), len(n.Rhs)
			if n.Tok==token.DEFINE {
				/// TODO: make this more robust.
				for i, e := range n.Lhs {
					var_name := e.(*ast.Ident)
					type_str := GetTypeString(e, var_name.Name, false)
					c.Funcs.WriteString(WriteTabStr(c.Tabs) + type_str + " = " + GetExprString(n.Rhs[i]))
					if add_semicolon {
						c.Funcs.WriteString(";")
					}
					if add_newline {
						c.Funcs.WriteString("\n")
					}
				}
				return
			} else {
				if left_len==rite_len {
					for i:=0; i<left_len; i++ {
						assign_str := GetExprString(n.Lhs[i]) + " " + n.Tok.String() + " " + GetExprString(n.Rhs[i])
						c.Funcs.WriteString(WriteTabStr(c.Tabs) + assign_str)
						if add_semicolon {
							c.Funcs.WriteString(";")
						}
						if add_newline {
							c.Funcs.WriteString("\n")
						}
					}
					return
				}
			}
		
		case *ast.ExprStmt:
			c.Funcs.WriteString(WriteTabStr(c.Tabs) + GetExprString(n.X))
		
		case *ast.IncDecStmt:
			c.Funcs.WriteString(WriteTabStr(c.Tabs) + GetExprString(n.X) + n.Tok.String())
		
		case *ast.ReturnStmt:
			if n.Results != nil {
				c.Funcs.WriteString(WriteTabStr(c.Tabs) + "return " + GetExprString(n.Results[0]))
			} else {
				c.Funcs.WriteString(WriteTabStr(c.Tabs) + "return")
			}
			
		case *ast.DeclStmt: /// automatically adds semicolon.
			c.GenerateGenDecl(n.Decl.(*ast.GenDecl), true)
			return
		
		case *ast.ForStmt:
			c.Funcs.WriteString(WriteTabStr(c.Tabs) + "for (")
			if n.Init != nil {
				old := c.Tabs
				c.Tabs = 0
				c.GenerateStmt(b, n.Init, false, false)
				c.Tabs = old
			}
			c.Funcs.WriteString("; ")
			if n.Cond != nil { /// condition; or nil
				c.Funcs.WriteString(GetExprString(n.Cond))
			}
			c.Funcs.WriteString("; ")
			if n.Post != nil { /// post iteration statement; or nil
				old := c.Tabs
				c.Tabs = 0
				c.GenerateStmt(b, n.Post, false, false)
				c.Tabs = old
			}
			c.Funcs.WriteString(")")
			c.GenerateStmts(n.Body)
			return
			
		case *ast.IfStmt:
			//if n.Init != nil {
			//	ManageStmtNode(owner_block, n.Init)
			//}
			if_stmt := n
			c.Funcs.WriteString(WriteTabStr(c.Tabs))
		re_if:
			c.Funcs.WriteString("if (" + GetExprString(if_stmt.Cond) + ")")
			c.GenerateStmts(if_stmt.Body)
			if if_stmt.Else != nil {
				c.Funcs.WriteString(WriteTabStr(c.Tabs) + "else ")
				switch s := if_stmt.Else.(type) {
					case *ast.IfStmt:
						if_stmt = s
						goto re_if
					default:
						c.GenerateStmt(b, s, true, true)
				}
			}
			return
			
		case *ast.BranchStmt:
			c.Funcs.WriteString(WriteTabStr(c.Tabs) + n.Tok.String())
		
		/// for a,b := range array {}
		/// for (int a = 0; a < sizeof(array); a++) { type b = array[a]; }
		case *ast.RangeStmt:
			key_str := GetExprString(n.Key)
			c.Funcs.WriteString(WriteTabStr(c.Tabs) + fmt.Sprintf("for (int %s; %s < sizeof(%s); %s++)", key_str, key_str, GetExprString(n.X), key_str))
			c.GenerateStmts(n.Body)
			return
		
		case *ast.SwitchStmt:
			/// if no tag expression, make it an if-else-if series.
			if n.Tag != nil {
				c.Funcs.WriteString(WriteTabStr(c.Tabs) + "switch (" + GetExprString(n.Tag) + ")")
				c.GenerateStmts(n.Body)
			} else {
				/// TODO: no tag? make if-else-if series.
				var case_list []*ast.CaseClause
				for _, stmt := range n.Body.List {
					case_list = append(case_list, stmt.(*ast.CaseClause))
				}
				cases := len(case_list)
				for i, case_ := range case_list {
					var put_rite_paren bool
					if i==0 {
						c.Funcs.WriteString(WriteTabStr(c.Tabs) + "if (")
						put_rite_paren = true
					} else if i+1 != cases {
						c.Funcs.WriteString(WriteTabStr(c.Tabs) + "else if (")
						put_rite_paren = true
					} else {
						c.Funcs.WriteString(WriteTabStr(c.Tabs) + "else")
					}
					conds := len(case_.List)
					if conds==0 && i==0 {
						c.Funcs.WriteString("true")
					} else {
						for n, expr := range case_.List {
							c.Funcs.WriteString("(" + GetExprString(expr) + ")")
							if n+1 != conds {
								c.Funcs.WriteString(" || ")
							}
						}
					}
					if put_rite_paren {
						c.Funcs.WriteString(")")
					}
					c.GenerateStmtsFromList(case_.Body)
				}
			}
			return
		
		case *ast.CaseClause:
			cases := len(n.List)
			if cases==0 {
				c.Funcs.WriteString(WriteTabStr(c.Tabs) + "default:")
				c.GenerateStmtsFromList(n.Body)
			} else {
				c.Funcs.WriteString(WriteTabStr(c.Tabs) + "case ")
				for i, expr := range n.List {
					c.Funcs.WriteString(GetExprString(expr))
					if i+1 != cases {
						c.Funcs.WriteString(", ")
					}
				}
				c.Funcs.WriteString(":")
				blockstmt := new(ast.BlockStmt)
				blockstmt.List = n.Body
				c.GenerateStmts(blockstmt)
			}
			return
		
		case *ast.EmptyStmt, *ast.CommClause, *ast.DeferStmt, *ast.TypeSwitchStmt, *ast.LabeledStmt, *ast.GoStmt, *ast.SelectStmt, *ast.SendStmt:
			return
		default:
			return
	}
	if add_semicolon {
		c.Funcs.WriteString(";")
	}
	if add_newline  {
		c.Funcs.WriteString("\n")
	}
}

func GetExprString(e ast.Expr) string {
	switch x := e.(type) {
		case *ast.IndexExpr:
			return GetExprString(x.X) + "[" + GetExprString(x.Index) + "]"
		
		case *ast.KeyValueExpr:
			return GetExprString(x.Key) + " = " + GetExprString(x.Value)
		
		case *ast.ParenExpr:
			return "(" + GetExprString(x.X) + ")"
		
		case *ast.StarExpr:
			/// ignore deref star
			return GetExprString(x.X)
		
		case *ast.UnaryExpr:
			if x.Op==token.AND {
				return GetExprString(x.X)
			}
			return x.Op.String() + GetExprString(x.X)
		
		case *ast.CallExpr:
			var call string
			name := GetExprString(x.Fun)
			if n, found := FuncNames[name]; found {
				name = n
			}
			call += name + "("
			for i, arg := range x.Args {
				call += GetExprString(arg)
				if i+1 != len(x.Args) {
					call += ", "
				}
			}
			call += ")"
			return call
		
		case *ast.BinaryExpr:
			return GetExprString(x.X) + " " + x.Op.String() + " " + GetExprString(x.Y)
		
		case *ast.SelectorExpr:
			return GetExprString(x.X) + "." + GetExprString(x.Sel)
		
		case *ast.Ident:
			if n, found := IdenNames[x.Name]; found {
				return n
			}
			return x.Name
		
		case *ast.BasicLit:
			return x.Value
		
		case *ast.TypeAssertExpr, *ast.SliceExpr:
			return ""
	}
	return ""
}